---
title: "수요곡선"
bibliography: pricing.bib
filters:
   - lightbox
lightbox: auto
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
                      comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
```

# 들어가며

가격 결정에서 독과점 구조에서 가격을 직접 결정할 수 있는 시장이 아닌 경우 고객 수요를 파악하는 것은 무척 중요하다. 여기서, **독점기업**은 대체 불가능한 제품 혹은 서비스를 유일하게 공급하는 기업을 의미한다. 일반적으로 가격 변화에 모든 수요물량을 정확히 알 수가 없기 때문에 다음 데이터를 가지고 수요 곡선을 가정해보자.


```{r}
library(tidyverse)
library(ggrepel)

segment_tbl <- tibble( x = c(50, 
                             50+150, 
                             50+150+350, 
                             50+150+350+250,
                             50+150+350+250+200),
                       y = c(20, 15, 10, 8, 6))



segment_tbl %>% 
  ggplot(aes(x = x, y = y)) +
    geom_point() +
    labs(x = "수요물량",
         y = "가격",
         title = "가격과 수요물량 관계") +
     geom_hline(yintercept = 5, linetype = 2, color = "gray70") +
     expand_limits(x =0, y =0) +
     theme_bw(base_family = "NanumGothic") +
     annotate("text", x = 1, y = 6, label = "변동비", size = 3)
```

가격 변화에 따라 관측된 5개 관측점을 선형 모형을 가정하여 난수를 발생하여 다양한 가격에 따른 물량을 시각화해보자. 실무에서는 자사의 가격변화를 달리하여 수많은 가격별 수요물량을 산출하는 것은 불가능하지만 경우에 따라서 경쟁제품이 많고 업력이 오래된 경우 가격별 물량 데이터를 얻어 회귀식으로부터 수요곡선을 도출하는 방법도 존재한다.

```{r}
## Price Response 곡선 ------------
model_tbl <- segment_tbl %>% 
  rename(물량 = x, 가격 = y)

price_response_lm <- lm(물량 ~ 가격, data = model_tbl)

generate_demands <- function(price) {
  
  price_response_coef <- coef(price_response_lm)
  error <- rnorm(length(price), mean = 0, sd = sd(model_tbl$물량))
  
  quantity <- price_response_coef[1] + price_response_coef[2] * price + error
  
  return(quantity)
}

## 시각화 --------
price_seq <- seq(0, 30, 1)
quantity_seq <- generate_demands(price_seq)

optimal_tbl <- tibble(가격 = price_seq, 수요물량 = quantity_seq)

optimal_tbl %>% 
  ggplot(aes( x= 가격, y = 수요물량)) +
    geom_point() +
    geom_smooth(method='lm') +
    geom_hline(yintercept = 5, linetype = 2, color = "gray70") +
    expand_limits(x =0, y =0) +
    theme_bw(base_family = "NanumGothic") +
    annotate("text", x = 1, y = 6, label = "변동비", size = 3)  
```



# 수요곡선 추정

데이터로부터 수요곡선을 추정하여 정확한 함수의 형태를 알 수 있다면 매출 혹은 순익을 극대화하는 물량을 계산할 수 있다.

수요함수를 물량에 관계없이 일정 가격을 부과하는 형태를 갖게 할 수도 있으며 선형 혹은 비선형 모형을 가정하여 추정할 수도 있다.

- 상수 수요모형: $d(P) = \alpha$
- 선형 수요모형: $d(P) = \alpha + \beta \times P$
- 비선형 수요모형: $d(P) = e^{\alpha + \beta \times log(P)}$

::: {.column-margin}

**베지어 곡선**

[베지어 곡선](https://ko.javascript.info/bezier-curve)을 이용하여 가격과 수요물량 사이 보간을 할 수 있다. `Hmisc::bezier()` 함수를 사용하면 수월히 값을 구할 수 있다.


```{r bezier}
library(tidyverse
        )
bezier_tbl <- Hmisc::bezier(segment_tbl$x, segment_tbl$y) %>% 
  as_tibble()

segment_tbl %>% 
  ggplot(aes(x = x, y = y)) +
    geom_point() +
    geom_path(data= bezier_tbl, aes(x = x, y = y), color = "blue") +
    labs(x = "수요물량",
         y = "가격",
         title = "가격과 수요물량 관계") +
     geom_hline(yintercept = 5, linetype = 2, color = "gray70") +
     expand_limits(x =0, y =0) +
     theme_bw(base_family = "NanumGothic") +
     annotate("text", x = 1, y = 6, label = "변동비", size = 3) +
     scale_x_continuous(labels = scales::comma)
```

:::


## 상수 수요모형

예를 들어 가격을 수요물량에 관계없이 일정가격 10을 가정할 경우 다음과 같다. 하지만 물량에는 한계가 있어 특정 물량((1,500)을 넘어가게 되면 공급을 더이상 할 수 없으니 가격은 0이 된다.

``` {r constant}
## 시각화 ---------------
step_tbl <- tribble(~"x", ~"y",
        0, 10,
        1250, 10,
        1250,0,
        2000,0)

segment_tbl %>% 
  ggplot(aes(x = x, y = y)) +
    geom_point() +
    labs(x = "수요물량",
         y = "가격",
         title = "가격과 수요물량 관계") +
     geom_hline(yintercept = 5, linetype = 2, color = "gray70") +
     expand_limits(x =0, y =0) +
     theme_bw(base_family = "NanumGothic") +
     annotate("text", x = 30, y = 6, label = "변동비($5)", size = 3)  +
     scale_x_continuous(labels = scales::comma)  +
     expand_limits(x = c(0, 2000)) +
     geom_path(data = step_tbl, aes(x = x, y = y), color = "blue")
```

## 선형 회귀 모형

수요함수($d(P)$, price-response function)를 선형으로 가정하고 Price-Response 함수를 추정해보자. 가격과 수요함수를 선형회귀식을 통해 추정할 경우 모수가 3개라서 관측점이 2개 이상이면 선형회귀방정식을 도출해낼 수 있다. 선형회귀식이 가격별 수요물량을 제대로 모형으로 일반화할 수 있는지 시각화를 통해 검증하는 방식이 혹시라도 생길 수 있는 전산 오류 혹은 이상점에 따른 불확실성 제거를 위해서도 꼭 필요한 과정이다.

``` {r nls}
## 비선형 수요모형 ---------

lm_mod <- lm(y ~ x, data = segment_tbl)

lm_coef <- broom::tidy(lm_mod) %>% 
  pull(estimate)

lm_fn <- function(x) lm_coef[1] + lm_coef[2] * x

## 시각화 ---------------
segment_tbl %>% 
  ggplot(aes(x = x, y = y)) +
    geom_point() +
    geom_function(fun = lm_fn, color = "blue") +
    labs(x = "수요물량",
         y = "가격",
         title = "가격과 수요물량 관계") +
     geom_hline(yintercept = 5, linetype = 2, color = "gray70") +
     expand_limits(x =0, y =0) +
     theme_bw(base_family = "NanumGothic") +
     annotate("text", x = 20, y = 6, label = "변동비($5)", size = 3)  +
     scale_x_continuous(labels = scales::comma)  
```


## 비선형 회귀모형

수요함수($d(P)$, price-response function)를 선형회귀식을 가정한 경우 변동율이 일정하다고 가정했지만 경우에 따라서 가격에 민감하게 반응하는 탄력성을 갖는 경우 특정 가격대에서는 급격한 수요변화를 일정 가격대를 넘게 되면 완만한 수요변화를 가정하는 것도 합리적이다. 이와 같은 가격대별로 비선형 가격탄력성을 갖는 관계를 비선형 회귀곡선으로 적합시켜 후속 업무에 활용할 수 있다. 


$$d(P) = e^{\alpha + \beta \times log(P)}$$

``` {r nls-fit}
## 비선형 수요모형 ---------
get_coef <- function() {
  x <- segment_tbl$x
  y <- segment_tbl$y
  
  demand_fit <- nls(y ~ exp(a + b * log(x)), start=list(a=0, b=0))
  
  nls_coef <- broom::tidy(demand_fit) %>% 
    pull(estimate)
  return(list(a = nls_coef[1],
              b = nls_coef[2]))
}

nls_coef <- get_coef()

nls_fn <- function(x) exp(nls_coef$a + nls_coef$b * log(x))

## 시각화 ---------------
segment_tbl %>% 
  ggplot(aes(x = x, y = y)) +
    geom_point() +
    geom_function(fun = nls_fn, color = "blue") +
    labs(x = "수요물량",
         y = "가격",
         title = "가격과 수요물량 관계") +
     geom_hline(yintercept = 5, linetype = 2, color = "gray70") +
     expand_limits(x =0, y =0) +
     theme_bw(base_family = "NanumGothic") +
     annotate("text", x = 20, y = 6, label = "변동비($5)", size = 3)  +
     scale_x_continuous(labels = scales::comma)  
```









