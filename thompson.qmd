---
title: "톰슨 샘플링"
filters:
   - lightbox
lightbox: auto
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk: 
    echo: true
    waring: false
    collapse: true
    comment: "#>"
---

# 가격 탐색과 활용

사업목표를 달성할 수 있는 가격을 정해야하는데 문제는 적정 가격이 얼마인지 알 수 없다는 점이다. 사업과 과학기술 연구개발은 목적이 다르기 때문에 사업목표를 달성하는 가장 큰 기여를 하는 가격을 책정한 후에 특정된 가격을 실제 사업에 반영하여 매출 혹은 순익, 고객유지율 등 당면한 문제해결에 기여해야 한다.

이와 같은 상황에 최적 가격을 **탐색(Explore)**하는 과정과 특정된 가격을 **최대한 활용(Exploit)**하여 사업목표를 극대화해야만 된다.

# 가격과 매출

앞서 학습한 커피가격에 판매는 고정된 함수관계가 아니고 수요는 경기, 물가, 건강, 소득 등 다양한 요인에 따라 다양한 형태를 갖는 확률분포를 따르게 된다. 가격 변화에 따른 수요를 정규분포를 가정하면 모의시험을 통해 즉, 난수를 생성시켜 매출도 예측할 수 있다.

## 수요 확률분포

수요변화를 정규분포를 가정하고 모형을 세우면 다음과 같은 모습이 될 것이다. 즉, 수요는 가격에 따라 특정 수요량으로 고정된 것이 아니라 앞서 언급한 사회경제, 주변 경쟁업체 수, 다양한 가격정책 등에 따라 수요는 변동성을 갖게 된다.
평균 

```{r}
library(tidyverse)
## 1. 데이터 -------------
coffee_tbl <- tribble(~"가격", ~"수요",
                      1000, 120,
                      2000, 80,
                      3000, 40,
                      4000, 20)

## 2. 정규분포 -------------

ggplot(data = data.frame(x = c(0, 180)), aes(x)) +
  scale_y_continuous(breaks = NULL) +
  ## 가격 1,000원 ------
  stat_function(fun = dnorm, n = 101, 
                args = list(mean = 120, sd = 15)) + 
  geom_point(aes(x=120, y=0), size =3) +  
  ## 가격 2,000원 ------
  stat_function(fun = dnorm, n = 101, 
                args = list(mean = 80, sd = 10), color="red") +
  geom_point(aes(x=80, y=0), size =3, color = "red") +  
  ## 가격 3,000원 ------  
  stat_function(fun = dnorm, n = 101, 
                args = list(mean = 40, sd = 7), color="blue") +
  geom_point(aes(x=40, y=0), size =3, color = "blue") +  
  ## 가격 4,000원 ------  
  stat_function(fun = dnorm, n = 101, 
                args = list(mean = 20, sd = 5), color="orange") +  
  geom_point(aes(x=20, y=0), size =3, color = "orange") +  
  theme_minimal() +
  labs(title = "가격별 예상판매 커피수 확률분포",
       x = "커피 판매량 (단위: 컵)",
       y = "") +
  geom_text(aes(x = 120, y = 0.01, label = "1천원"), color = "black") +
  geom_text(aes(x = 80,  y = 0.01, label = "2천원"), color = "red") +
  geom_text(aes(x = 40,  y = 0.01, label = "3천원"), color = "blue") +
  geom_text(aes(x = 20,  y = 0.01, label = "4천원"), color = "orange") 
```


## 가격별 커피 판매량

가격 변동에 따라 매출이 어떻게 변화하게 되는지 각 분포에서 난수를 추출하여 모의실험을 수행해보자. 


$$ X_{\text{커피 판매량}} \sim \mathcal{N}(\mu,\,\sigma^{2})$$

- $X_{\text{1천원}} \sim \mathcal{N}(120,\, 15^{2})$
- $X_{\text{2천원}} \sim \mathcal{N}(80, \, 10^{2})$
- $X_{\text{3천원}} \sim \mathcal{N}(40, \,  7^{2})$
- $X_{\text{4천원}} \sim \mathcal{N}(20, \,  5^{2})$

상기 4가지 가격정책에 대해 1,000개 난수를 추출하여 판매량을 예측해본다.


```{r}
coffee_quantity <- tribble(~"mean", ~"sd",
        120, 15,
        80, 10,
        40, 7,
        20, 5) %>% 
  mutate(price = case_when(mean == 120 ~ "1천원",
                           mean ==  80 ~ "2천원",
                           mean ==  40 ~ "3천원",
                           mean ==  20 ~ "4천원"))

coffee_quantity_data <- coffee_quantity %>% 
  mutate(판매량 = map2(mean, sd, rnorm, n = 1000) )

coffee_quantity_data


coffee_quantity_data %>% 
  unnest(판매량) %>% 
  ggplot(aes(x = 판매량, fill = fct_rev(price))) +
    geom_histogram(alpha = 0.7, position = "identity") +
    labs(title = "가격별 예상판매 모의 커피수",
         x = "커피 판매량 (단위: 컵)",
         y = "",
         fill = "커피가격") +
    theme_bw() +
    theme(legend.position = "top")
```

## 가격별 매출확률분포

가격 변화에 따라 판매량이 가격민감도에 따라 차이가 나기 때문에 모의시험을 통해 매출변화를 살펴보면 커피값 2,000원에서 가장 높은 매출이 나타났다. 가격이 4,000원일 때 상대적으로 낮은 매출이 나왔으며 2,000/3,000원에서는 대략 유사한 매출이 관측됐다.

```{r}
coffee_quantity_data %>% 
  unnest(판매량) %>% 
  mutate(가격 = case_when(mean == 120 ~ 1000,
                           mean ==  80 ~ 2000,
                           mean ==  40 ~ 3000,
                           mean ==  20 ~ 4000)) %>% 
  mutate(매출 = 가격 * 판매량 / 10^4) %>% 
    ggplot(aes(x = 매출, fill = as.factor(가격))) +
    geom_histogram(alpha = 0.7, position = "identity") +
    labs(title = "일일 가격별 예상매출 모의시험 결과",
         x = "커피 매출 (단위: 만원)",
         y = "",
         fill = "커피가격") +
    theme_bw() +
    theme(legend.position = "top")
```


# 톰슨 샘플링

톰슨 샘플링(Thompson sampling)은 1933년 톰슨이 최초 기술되었으나 Multi-Armed Bandit 문제를 통해 다시 부각되기 시작했다. 

서로 다른 가격정책을 취하는 커피점 3개가 있다고 가정하자. 커피 만족도는 다양한 요인이 고객의 만족도에 영향을 준다. 대체로 커피점 C가 만족도가 가장 높은 것으로 나오나 일자별로 살펴보면 평균적으로 A커피점이 B커피점 보다 낮은 만족도를 주고 있으나 날씨, 매장 상황 등 여러 요인으로 인해 A커피점이 B커피점보다 더 높은 만족도를 주는 경우도 있다. 

커피점 3 곳에 경쟁하고 있고 각 커피점이 주는 고객 만족도가 서로 다른 확률분포를 따른다고 가정했을 때 처음 이사를 온 김모씨는 처음 몇일 동안 탐색기간을 가지게 되고 어느 정도 탐색기간이 끝나게 되면 더이상의 탐색은 하지 않고 김모씨 본인의 효용을 극대화하기 위해 특정 커피점만 이용하는 행태를 갖게 된다. 이를 시각적으로 표현하면 다음과 같다.


![](images/thompson-sampling.png)

## 최고의 맛집

커피집 3곳에 동시에 오픈을 했는데 100명이 커피집을 골고루 방문한 후에 만족한 고객숫자와 불만족한 고객숫자를 다음과 같이 설정하고 10 영업일 기준 최고맛집을 선정할 수 있다. 먼저 베타분포에서 각 커피점 방문 고객 만족자수와 불만족 고객수를 형태모수로 넣어 10 영업일 기준 최고의 맛집을 선정한다.

```{r}
# 커피점 방문 숫자
beta_visits <- c(100, 100, 100)
# 커피집 만족 고객수
beta_success <- c(10, 11, 15)
# 커피집 불만족 고객수
beta_failure <- beta_visits - beta_success

num_shops <- length(beta_visits)
# 영업일수
num_days <- 10 
# 베타분포 (성공, 실패) 하루 영업일

one_day_tbl <- tibble("A커피점" = rbeta(1, 1+beta_success[1], 1+beta_failure[1]),
                      "B커피점" = rbeta(1, 1+beta_success[2], 1+beta_failure[2]),
                      "C커피점" = rbeta(1, 1+beta_success[3], 1+beta_failure[3]))

# tibble(beta_success, beta_failure) %>% 
#   mutate(data = map2_dbl(beta_success, beta_failure, rbeta, n=1))


# 베타분포 (성공, 실패) N 영업일
coffee_tbl <- tibble()

for(i in 1:num_days) {
  
  one_day_tbl <- tibble("A커피점" = rbeta(1, 1+beta_success[1], 1+beta_failure[1]),
                        "B커피점" = rbeta(1, 1+beta_success[2], 1+beta_failure[2]),
                        "C커피점" = rbeta(1, 1+beta_success[3], 1+beta_failure[3]))

  coffee_tbl <- bind_rows(coffee_tbl, one_day_tbl)
}

# 커피집 선정
coffee_tbl %>% 
  mutate(오늘의맛집 = max.col(coffee_tbl)) %>% 
  mutate(오늘의맛집 = factor(오늘의맛집, labels = c("A커피점", "B커피점", "C커피점"))) %>% 
  group_by(오늘의맛집) %>% 
  summarise(선정횟수 = n()) %>% 
  mutate(선정비율 = 선정횟수 / sum(선정횟수))
```


## 커피집 선정과정

톰슨 샘플링을 통해 커피집 선정과 가격결정 등 주요 의사결정에 있어 장점은 자기수정기능이 있다는 점이다. 예를 들어, 매월 커피집 선정과 가격절정 등 수집된 실증 사업데이터를 자동갱신하여 사업을 계속할 수 있다.


예를 들어, 다음과 같이 서로 다른 세가지 특성(다른 조건은 동일하고 가격이 다소 다른 커피집)을 갖는 취하는 커피집이 있다고 하면 미세한 차이가 나지만 이러한 작은 차이가 매월매월 지나면서 방문자수에서 차이가 나고 사업의 성패를 좌우하게 됩니다.

베르누이 밴딧을 상정하고 톰슨 샘플링을 구현한 의사코드는 다음과 같다. 형태모수 $\alpha, \beta$를 베타분포에서 보통 $\alpha=1, \beta=1$로 지정하여 균등분포로 두고 성공과 실패를 고객의 방문, 온라인광고의 경우 노출시 클릭여부로 두고 알고리즘 전반을 설정한다. 그리고 나서 K개 커피집(여기서는 3개)에 대해 T명 지나가는 행인(여기서는 100명)을 반복하는 난수를 베타분포에서 추출한다. 이후 가장 많은 방문을 갖는 커피집을 선정하고 나서 성공과 실패를 갱신한다. 

[의사 알고리즘 이미지 출처: [카카오 AI추천 : 토픽 모델링과 MAB를 이용한 카카오 개인화 추천](https://tech.kakao.com/2021/06/25/kakao-ai-recommendation-01/)]{.aside}

![톰슨 샘플링 의사코드](images/thompson_pseudo_code.png)


```{r}
#| eval: false
set.seed(77777)
## 설정 --------------------
coffee_tbl <- {}

success_prob <- c(0.10, 0.11, 0.15)
beta_visits  <- rep(0, length(success_prob))
beta_success <- rep(0, length(success_prob))

num_shops  <- length(success_prob)

visits_size <- 100

## 1개월 영업 -------------------
get_monthly_prob <- function(beta_visits, beta_success) {
  
  monthly_coffee <- tibble()
  
  # 영업일 100명 기준 일별 커피집 방문
  for(i in 1:100) {
    # 고객 커피집 선택 난수생성
    user_prob_tbl <- tibble(beta_success, beta_visits) %>%
      mutate(beta_failure = beta_visits - beta_success) %>% 
      mutate(data = map2_dbl(beta_success+1, beta_failure+1, rbeta, n = 1)) %>% 
      mutate(data = ifelse(is.finite(data), data, 0 )) %>%
      mutate(shops = c("A커피집", "B커피집", "C커피집")) %>% 
      select(shops, data) %>% 
      pivot_wider(names_from = shops, values_from = data, values_fill = 0)
  
    monthly_coffee <- bind_rows(monthly_coffee, user_prob_tbl)
  }
  
  # daily_coffee
  
  # 영업일 100명 기준 방문 실적 업데이트
  updated_prob <- monthly_coffee %>% 
    mutate(오늘의맛집 = max.col(monthly_coffee)) %>% 
    # mutate(오늘의맛집 = factor(오늘의맛집, 
    #                       labels = c("A커피점", "B커피점", "C커피점"))) %>% 
    group_by(오늘의맛집) %>% 
    summarise(선정횟수 = n()) %>% 
    mutate(선정확률 = 선정횟수 / sum(선정횟수, na.rm=TRUE)) %>% 
    pull(선정확률)
  
  updated_prob
}

get_monthly_prob(beta_success, beta_visits)

## 12개월 영업 -------------------

for (i in 1:12) { # 12개월
  
  # 매월 커피집 방문 확률 반영
  updated_prob <- get_monthly_prob(beta_visits, beta_success)
  
  # 월별 가중치 변경
  weights <- round(updated_prob * visits_size, 0)

  # 커피구매 고객수 수정 반영
  beta_success <- beta_success + rbinom(rep(1, num_shops), size = weights,
                                        prob = success_prob)

  # 전체 고객 방문고객수 반영
  beta_visits <- beta_visits + weights
  
  # 월별 커피집 방문확률 누적
  coffee_tbl <- rbind(coffee_tbl, t(matrix(updated_prob)))
  
}

coffee_tbl_rds <- coffee_tbl %>% 
  as_tibble() %>% 
  set_names(c("A커피점", "B커피점", "C커피점")) %>% 
  mutate(월별 = 1:12) %>% 
  pivot_longer(cols = -월별, names_to = "커피점", values_to = "방문확률")

coffee_tbl_rds %>% 
  write_rds("data/coffee_tbl_rds.rds")

```

상기 커피집 방문확률을 월별로 나눠 쭉 지켜보게 되면 다음과 같이 처음에는 A, B 커피집이 우세하지만 시간이 지나면서 고객은 C 커피집 선택이 확대되는 것을 확인할 수 있다. 


```{r}
coffee_tbl_rds <- 
  read_rds("data/coffee_tbl_rds.rds")

coffee_tbl_rds %>% 
  ggplot(aes(x = as.factor(월별), y = 방문확률, fill = 커피점)) + 
    geom_col() +
    labs(x = "월",
         title = "월별 고객 커피점 방문확률 예측") +
    theme_bw()

```

